// Generated by view binder compiler. Do not edit!
package com.example.nomeapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.nomeapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class UserInfoboxBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final CardView UserBox;

  @NonNull
  public final TextView UserBoxName;

  @NonNull
  public final ImageView UserBoxPhoto;

  @NonNull
  public final TextView UserBoxSurname;

  @NonNull
  public final TextView UserBoxUsername;

  private UserInfoboxBinding(@NonNull ConstraintLayout rootView, @NonNull CardView UserBox,
      @NonNull TextView UserBoxName, @NonNull ImageView UserBoxPhoto,
      @NonNull TextView UserBoxSurname, @NonNull TextView UserBoxUsername) {
    this.rootView = rootView;
    this.UserBox = UserBox;
    this.UserBoxName = UserBoxName;
    this.UserBoxPhoto = UserBoxPhoto;
    this.UserBoxSurname = UserBoxSurname;
    this.UserBoxUsername = UserBoxUsername;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static UserInfoboxBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static UserInfoboxBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.user_infobox, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static UserInfoboxBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.UserBox;
      CardView UserBox = ViewBindings.findChildViewById(rootView, id);
      if (UserBox == null) {
        break missingId;
      }

      id = R.id.UserBox_Name;
      TextView UserBoxName = ViewBindings.findChildViewById(rootView, id);
      if (UserBoxName == null) {
        break missingId;
      }

      id = R.id.UserBox_Photo;
      ImageView UserBoxPhoto = ViewBindings.findChildViewById(rootView, id);
      if (UserBoxPhoto == null) {
        break missingId;
      }

      id = R.id.UserBox_Surname;
      TextView UserBoxSurname = ViewBindings.findChildViewById(rootView, id);
      if (UserBoxSurname == null) {
        break missingId;
      }

      id = R.id.UserBox_Username;
      TextView UserBoxUsername = ViewBindings.findChildViewById(rootView, id);
      if (UserBoxUsername == null) {
        break missingId;
      }

      return new UserInfoboxBinding((ConstraintLayout) rootView, UserBox, UserBoxName, UserBoxPhoto,
          UserBoxSurname, UserBoxUsername);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
