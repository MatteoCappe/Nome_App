// Generated by view binder compiler. Do not edit!
package com.example.nomeapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.nomeapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class EventInfoboxBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final CardView EventBox;

  @NonNull
  public final TextView EventBoxCity;

  @NonNull
  public final TextView EventBoxDate;

  @NonNull
  public final TextView EventBoxID;

  @NonNull
  public final ImageView EventBoxPhoto;

  @NonNull
  public final TextView EventBoxTitle;

  private EventInfoboxBinding(@NonNull ConstraintLayout rootView, @NonNull CardView EventBox,
      @NonNull TextView EventBoxCity, @NonNull TextView EventBoxDate, @NonNull TextView EventBoxID,
      @NonNull ImageView EventBoxPhoto, @NonNull TextView EventBoxTitle) {
    this.rootView = rootView;
    this.EventBox = EventBox;
    this.EventBoxCity = EventBoxCity;
    this.EventBoxDate = EventBoxDate;
    this.EventBoxID = EventBoxID;
    this.EventBoxPhoto = EventBoxPhoto;
    this.EventBoxTitle = EventBoxTitle;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static EventInfoboxBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static EventInfoboxBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.event_infobox, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static EventInfoboxBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.EventBox;
      CardView EventBox = ViewBindings.findChildViewById(rootView, id);
      if (EventBox == null) {
        break missingId;
      }

      id = R.id.EventBox_City;
      TextView EventBoxCity = ViewBindings.findChildViewById(rootView, id);
      if (EventBoxCity == null) {
        break missingId;
      }

      id = R.id.EventBox_Date;
      TextView EventBoxDate = ViewBindings.findChildViewById(rootView, id);
      if (EventBoxDate == null) {
        break missingId;
      }

      id = R.id.EventBox_ID;
      TextView EventBoxID = ViewBindings.findChildViewById(rootView, id);
      if (EventBoxID == null) {
        break missingId;
      }

      id = R.id.EventBox_Photo;
      ImageView EventBoxPhoto = ViewBindings.findChildViewById(rootView, id);
      if (EventBoxPhoto == null) {
        break missingId;
      }

      id = R.id.EventBox_Title;
      TextView EventBoxTitle = ViewBindings.findChildViewById(rootView, id);
      if (EventBoxTitle == null) {
        break missingId;
      }

      return new EventInfoboxBinding((ConstraintLayout) rootView, EventBox, EventBoxCity,
          EventBoxDate, EventBoxID, EventBoxPhoto, EventBoxTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
